// Code generated by genji.
// DO NOT EDIT!

package genji_test

import (
	"errors"

	"github.com/asdine/genji/field"
	"github.com/asdine/genji/query"
	"github.com/asdine/genji/record"
	"github.com/asdine/genji/table"
)

// Field implements the field method of the record.Record interface.
func (u *User) Field(name string) (field.Field, error) {
	switch name {
	case "ID":
		return field.Field{
			Name: "ID",
			Type: field.Int64,
			Data: field.EncodeInt64(u.ID),
		}, nil
	case "Name":
		return field.Field{
			Name: "Name",
			Type: field.String,
			Data: field.EncodeString(u.Name),
		}, nil
	case "Age":
		return field.Field{
			Name: "Age",
			Type: field.Uint32,
			Data: field.EncodeUint32(u.Age),
		}, nil
	}

	return field.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (u *User) Iterate(fn func(field.Field) error) error {
	var err error
	var f field.Field

	f, _ = u.Field("ID")
	err = fn(f)
	if err != nil {
		return err
	}

	f, _ = u.Field("Name")
	err = fn(f)
	if err != nil {
		return err
	}

	f, _ = u.Field("Age")
	err = fn(f)
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (u *User) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f field.Field) error {
		var err error

		switch f.Name {
		case "ID":
			u.ID, err = field.DecodeInt64(f.Data)
		case "Name":
			u.Name, err = field.DecodeString(f.Data)
		case "Age":
			u.Age, err = field.DecodeUint32(f.Data)
		}
		return err
	})
}

// Pk returns the primary key. It implements the table.Pker interface.
func (u *User) Pk() ([]byte, error) {
	return field.EncodeInt64(u.ID), nil
}

// UserQuerySelector provides helpers for selecting fields from the User structure.
type UserQuerySelector struct {
	ID   query.Int64FieldSelector
	Name query.StringFieldSelector
	Age  query.Uint32FieldSelector
}

// NewUserQuerySelector creates a UserQuerySelector.
func NewUserQuerySelector() UserQuerySelector {
	return UserQuerySelector{
		ID:   query.Int64Field("ID"),
		Name: query.StringField("Name"),
		Age:  query.Uint32Field("Age"),
	}
}

// Table returns a query.TableSelector for User.
func (*UserQuerySelector) Table() query.TableSelector {
	return query.Table("User")
}

// All returns a list of all selectors for User.
func (s *UserQuerySelector) All() []query.FieldSelector {
	return []query.FieldSelector{
		s.ID,
		s.Name,
		s.Age,
	}
}

// UserResult can be used to store the result of queries.
// Selected fields must map the User fields.
type UserResult []User

// ScanTable iterates over table.Reader and stores all the records in the slice.
func (u *UserResult) ScanTable(tr table.Reader) error {
	return tr.Iterate(func(_ []byte, r record.Record) error {
		var record User
		err := record.ScanRecord(r)
		if err != nil {
			return err
		}

		*u = append(*u, record)
		return nil
	})
}
