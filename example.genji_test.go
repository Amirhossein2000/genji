// Code generated by genji.
// DO NOT EDIT!

package genji_test

import (
	"errors"

	"github.com/asdine/genji/document"
)

// GetValueByName implements the field method of the document.Document interface.
func (u *User) GetValueByName(name string) (document.Field, error) {
	switch name {
	case "id":
		return document.NewInt64Value("id", u.ID), nil
	case "name":
		return document.NewStringValue("name", u.Name), nil
	case "age":
		return document.NewUint32Value("age", u.Age), nil
	}

	return document.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (u *User) Iterate(fn func(document.Field) error) error {
	var err error

	err = fn(document.NewInt64Value("id", u.ID))
	if err != nil {
		return err
	}

	err = fn(document.NewStringValue("name", u.Name))
	if err != nil {
		return err
	}

	err = fn(document.NewUint32Value("age", u.Age))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (u *User) ScanRecord(rec document.Document) error {
	return rec.Iterate(func(f document.Field) error {
		var err error

		switch f.Name {
		case "id":
			u.ID, err = f.DecodeToInt64()
		case "name":
			u.Name, err = f.DecodeToString()
		case "age":
			u.Age, err = f.DecodeToUint32()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (u *User) Scan(src interface{}) error {
	rr, ok := src.(document.Document)
	if !ok {
		return errors.New("unable to scan record from src")
	}

	return u.ScanRecord(rr)
}
