// Code generated by genji.
// DO NOT EDIT!

package genji_test

import (
	"errors"

	"github.com/asdine/genji/record"
	"github.com/asdine/genji/value"
)

// GetField implements the field method of the record.Record interface.
func (u *User) GetField(name string) (record.Field, error) {
	switch name {
	case "ID":
		return record.NewInt64Field("ID", u.ID), nil
	case "Name":
		return record.NewStringField("Name", u.Name), nil
	case "Age":
		return record.NewUint32Field("Age", u.Age), nil
	}

	return record.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (u *User) Iterate(fn func(record.Field) error) error {
	var err error

	err = fn(record.NewInt64Field("ID", u.ID))
	if err != nil {
		return err
	}

	err = fn(record.NewStringField("Name", u.Name))
	if err != nil {
		return err
	}

	err = fn(record.NewUint32Field("Age", u.Age))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the record.Scanner interface.
func (u *User) ScanRecord(rec record.Record) error {
	return rec.Iterate(func(f record.Field) error {
		var err error

		switch f.Name {
		case "ID":
			u.ID, err = value.DecodeInt64(f.Data)
		case "Name":
			u.Name, err = value.DecodeString(f.Data)
		case "Age":
			u.Age, err = value.DecodeUint32(f.Data)
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (u *User) Scan(src interface{}) error {
	r, ok := src.(record.Record)
	if !ok {
		return errors.New("unable to scan record from src")
	}

	return u.ScanRecord(r)
}

// PrimaryKey returns the primary key. It implements the table.PrimaryKeyer interface.
func (u *User) PrimaryKey() ([]byte, error) {
	return value.EncodeInt64(u.ID), nil
}
