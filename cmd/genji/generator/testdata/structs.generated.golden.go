// Code generated by genji.
// DO NOT EDIT!

package testdata

import (
	"errors"

	"github.com/asdine/genji/document"
)

// GetField implements the field method of the document.Record interface.
func (b *Basic) GetField(name string) (document.Field, error) {
	switch name {
	case "a":
		return document.NewStringField("a", b.A), nil
	case "b":
		return document.NewIntField("b", b.B), nil
	case "c":
		return document.NewInt32Field("c", b.C), nil
	case "d":
		return document.NewInt32Field("d", b.D), nil
	}

	return document.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (b *Basic) Iterate(fn func(document.Field) error) error {
	var err error

	err = fn(document.NewStringField("a", b.A))
	if err != nil {
		return err
	}

	err = fn(document.NewIntField("b", b.B))
	if err != nil {
		return err
	}

	err = fn(document.NewInt32Field("c", b.C))
	if err != nil {
		return err
	}

	err = fn(document.NewInt32Field("d", b.D))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (b *Basic) ScanRecord(rec document.Record) error {
	return rec.Iterate(func(f document.Field) error {
		var err error

		switch f.Name {
		case "a":
			b.A, err = f.DecodeToString()
		case "b":
			b.B, err = f.DecodeToInt()
		case "c":
			b.C, err = f.DecodeToInt32()
		case "d":
			b.D, err = f.DecodeToInt32()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (b *Basic) Scan(src interface{}) error {
	rr, ok := src.(document.Record)
	if !ok {
		return errors.New("unable to scan record from src")
	}

	return b.ScanRecord(rr)
}

// GetField implements the field method of the document.Record interface.
func (b *basic) GetField(name string) (document.Field, error) {
	switch name {
	case "a":
		return document.NewBytesField("a", b.A), nil
	case "b":
		return document.NewUint16Field("b", b.B), nil
	case "c":
		return document.NewFloat64Field("c", b.C), nil
	case "d":
		return document.NewFloat64Field("d", b.D), nil
	}

	return document.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (b *basic) Iterate(fn func(document.Field) error) error {
	var err error

	err = fn(document.NewBytesField("a", b.A))
	if err != nil {
		return err
	}

	err = fn(document.NewUint16Field("b", b.B))
	if err != nil {
		return err
	}

	err = fn(document.NewFloat64Field("c", b.C))
	if err != nil {
		return err
	}

	err = fn(document.NewFloat64Field("d", b.D))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (b *basic) ScanRecord(rec document.Record) error {
	return rec.Iterate(func(f document.Field) error {
		var err error

		switch f.Name {
		case "a":
			b.A, err = f.DecodeToBytes()
		case "b":
			b.B, err = f.DecodeToUint16()
		case "c":
			b.C, err = f.DecodeToFloat64()
		case "d":
			b.D, err = f.DecodeToFloat64()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (b *basic) Scan(src interface{}) error {
	rr, ok := src.(document.Record)
	if !ok {
		return errors.New("unable to scan record from src")
	}

	return b.ScanRecord(rr)
}

// GetField implements the field method of the document.Record interface.
func (c *CustomFieldNames) GetField(name string) (document.Field, error) {
	switch name {
	case "A":
		return document.NewStringField("A", c.A), nil
	case "b":
		return document.NewIntField("b", c.B), nil
	case "c":
		return document.NewInt32Field("c", c.C), nil
	case "d":
		return document.NewInt32Field("d", c.D), nil
	}

	return document.Field{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (c *CustomFieldNames) Iterate(fn func(document.Field) error) error {
	var err error

	err = fn(document.NewStringField("A", c.A))
	if err != nil {
		return err
	}

	err = fn(document.NewIntField("b", c.B))
	if err != nil {
		return err
	}

	err = fn(document.NewInt32Field("c", c.C))
	if err != nil {
		return err
	}

	err = fn(document.NewInt32Field("d", c.D))
	if err != nil {
		return err
	}

	return nil
}

// ScanRecord extracts fields from record and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (c *CustomFieldNames) ScanRecord(rec document.Record) error {
	return rec.Iterate(func(f document.Field) error {
		var err error

		switch f.Name {
		case "A":
			c.A, err = f.DecodeToString()
		case "b":
			c.B, err = f.DecodeToInt()
		case "c":
			c.C, err = f.DecodeToInt32()
		case "d":
			c.D, err = f.DecodeToInt32()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (c *CustomFieldNames) Scan(src interface{}) error {
	rr, ok := src.(document.Record)
	if !ok {
		return errors.New("unable to scan record from src")
	}

	return c.ScanRecord(rr)
}
