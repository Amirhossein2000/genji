// Code generated by genji.
// DO NOT EDIT!

package testdata

import (
	"errors"

	"github.com/asdine/genji/document"
)

// GetByField implements the field method of the document.Document interface.
func (b *Basic) GetByField(field string) (document.Value, error) {
	switch field {
	case "a":
		return document.NewStringValue(b.A), nil
	case "b":
		return document.NewIntValue(b.B), nil
	case "c":
		return document.NewInt32Value(b.C), nil
	case "d":
		return document.NewInt32Value(b.D), nil
	}

	return document.Value{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (b *Basic) Iterate(fn func(string, document.Value) error) error {
	var err error

	err = fn("a", document.NewStringValue(b.A))
	if err != nil {
		return err
	}

	err = fn("b", document.NewIntValue(b.B))
	if err != nil {
		return err
	}

	err = fn("c", document.NewInt32Value(b.C))
	if err != nil {
		return err
	}

	err = fn("d", document.NewInt32Value(b.D))
	if err != nil {
		return err
	}

	return nil
}

// ScanDocument extracts fields from document and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (b *Basic) ScanDocument(doc document.Document) error {
	return doc.Iterate(func(f string, v document.Value) error {
		var err error

		switch f {
		case "a":
			b.A, err = v.ConvertToString()
		case "b":
			b.B, err = v.ConvertToInt()
		case "c":
			b.C, err = v.ConvertToInt32()
		case "d":
			b.D, err = v.ConvertToInt32()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (b *Basic) Scan(src interface{}) error {
	doc, ok := src.(document.Document)
	if !ok {
		return errors.New("unable to scan document from src")
	}

	return b.ScanDocument(doc)
}

// GetByField implements the field method of the document.Document interface.
func (b *basic) GetByField(field string) (document.Value, error) {
	switch field {
	case "a":
		return document.NewBytesValue(b.A), nil
	case "b":
		return document.NewUint16Value(b.B), nil
	case "c":
		return document.NewFloat64Value(b.C), nil
	case "d":
		return document.NewFloat64Value(b.D), nil
	}

	return document.Value{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (b *basic) Iterate(fn func(string, document.Value) error) error {
	var err error

	err = fn("a", document.NewBytesValue(b.A))
	if err != nil {
		return err
	}

	err = fn("b", document.NewUint16Value(b.B))
	if err != nil {
		return err
	}

	err = fn("c", document.NewFloat64Value(b.C))
	if err != nil {
		return err
	}

	err = fn("d", document.NewFloat64Value(b.D))
	if err != nil {
		return err
	}

	return nil
}

// ScanDocument extracts fields from document and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (b *basic) ScanDocument(doc document.Document) error {
	return doc.Iterate(func(f string, v document.Value) error {
		var err error

		switch f {
		case "a":
			b.A, err = v.ConvertToBytes()
		case "b":
			b.B, err = v.ConvertToUint16()
		case "c":
			b.C, err = v.ConvertToFloat64()
		case "d":
			b.D, err = v.ConvertToFloat64()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (b *basic) Scan(src interface{}) error {
	doc, ok := src.(document.Document)
	if !ok {
		return errors.New("unable to scan document from src")
	}

	return b.ScanDocument(doc)
}

// GetByField implements the field method of the document.Document interface.
func (c *CustomFieldNames) GetByField(field string) (document.Value, error) {
	switch field {
	case "A":
		return document.NewStringValue(c.A), nil
	case "b":
		return document.NewIntValue(c.B), nil
	case "c":
		return document.NewInt32Value(c.C), nil
	case "d":
		return document.NewInt32Value(c.D), nil
	}

	return document.Value{}, errors.New("unknown field")
}

// Iterate through all the fields one by one and pass each of them to the given function.
// It the given function returns an error, the iteration is interrupted.
func (c *CustomFieldNames) Iterate(fn func(string, document.Value) error) error {
	var err error

	err = fn("A", document.NewStringValue(c.A))
	if err != nil {
		return err
	}

	err = fn("b", document.NewIntValue(c.B))
	if err != nil {
		return err
	}

	err = fn("c", document.NewInt32Value(c.C))
	if err != nil {
		return err
	}

	err = fn("d", document.NewInt32Value(c.D))
	if err != nil {
		return err
	}

	return nil
}

// ScanDocument extracts fields from document and assigns them to the struct fields.
// It implements the document.Scanner interface.
func (c *CustomFieldNames) ScanDocument(doc document.Document) error {
	return doc.Iterate(func(f string, v document.Value) error {
		var err error

		switch f {
		case "A":
			c.A, err = v.ConvertToString()
		case "b":
			c.B, err = v.ConvertToInt()
		case "c":
			c.C, err = v.ConvertToInt32()
		case "d":
			c.D, err = v.ConvertToInt32()
		}
		return err
	})
}

// Scan extracts fields from src and assigns them to the struct fields.
// It implements the driver.Scanner interface.
func (c *CustomFieldNames) Scan(src interface{}) error {
	doc, ok := src.(document.Document)
	if !ok {
		return errors.New("unable to scan document from src")
	}

	return c.ScanDocument(doc)
}
